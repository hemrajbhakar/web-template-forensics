name: Build Tree-sitter Parsers

on:
  push:
    branches: [dev]
    tags: ['v*']
  workflow_dispatch:  # Added for manual testing

jobs:
  build-parsers:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install "tree-sitter==0.20.1"  # Pin to known working version

      - name: Clone grammars
        run: |
          git clone https://github.com/tree-sitter/tree-sitter-javascript.git
          git clone https://github.com/tree-sitter/tree-sitter-typescript.git

      - name: Install npm dependencies
        run: |
          cd tree-sitter-javascript && npm install
          cd ../tree-sitter-typescript/typescript && npm install
        shell: bash

      - name: Determine extension
        id: ext
        run: |
          if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
            echo "ext=so" >> $GITHUB_OUTPUT
          elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            echo "ext=dylib" >> $GITHUB_OUTPUT
          else
            echo "ext=dll" >> $GITHUB_OUTPUT
          fi
        shell: bash

      - name: Create build directory
        run: mkdir -p build
        shell: bash

      - name: Create build script
        run: |
          cat > build/build_parsers.py << 'EOF'
          import os
          import sys
          
          # Get the file extension from environment
          ext = os.environ.get('FILE_EXT', 'so')
          output_path = f"build/my-languages.{ext}"
          
          try:
              from tree_sitter import Language
              # Build the library
              Language.build_library(
                  output_path,
                  [
                      "tree-sitter-javascript",
                      "tree-sitter-typescript/typescript"
                  ]
              )
              print(f"Successfully built: {output_path}")
          except Exception as e:
              print(f"ERROR building library: {e}")
              import traceback
              traceback.print_exc()
              sys.exit(1)
          EOF
        shell: bash

      - name: Check tree-sitter installation
        run: |
          python -c "import tree_sitter; print('tree_sitter module imported successfully')"
          python -c "from tree_sitter import Language; print('Language class available:', 'build_library' in dir(Language))"
          pip show tree-sitter
        shell: bash

      - name: Build language library
        env:
          FILE_EXT: ${{ steps.ext.outputs.ext }}
        run: python build/build_parsers.py

      - name: Verify build output
        run: |
          echo "Checking for built library..."
          if [ ! -f "build/my-languages.${{ steps.ext.outputs.ext }}" ]; then
            echo "❌ ERROR: Expected file 'build/my-languages.${{ steps.ext.outputs.ext }}' not found!"
            echo "Build directory contents:"
            ls -la build/ || echo "Build directory not found"
            exit 1
          fi
          echo "✅ Successfully built: build/my-languages.${{ steps.ext.outputs.ext }}"
          echo "File size: $(ls -lh build/my-languages.${{ steps.ext.outputs.ext }} | awk '{print $5}')"
        shell: bash

      - name: Prepare output directory
        run: |
          mkdir -p prebuilt/${{ matrix.os }}
          cp build/my-languages.${{ steps.ext.outputs.ext }} prebuilt/${{ matrix.os }}/
          
          # Verify the copy was successful
          if [ ! -f "prebuilt/${{ matrix.os }}/my-languages.${{ steps.ext.outputs.ext }}" ]; then
            echo "❌ ERROR: Failed to copy library to prebuilt directory"
            exit 1
          fi
          echo "✅ Library copied successfully to prebuilt/${{ matrix.os }}/"
        shell: bash

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: parser-${{ matrix.os }}
          path: prebuilt/${{ matrix.os }}/
          retention-days: 7

  commit-binaries:
    needs: build-parsers
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/dev'
    
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: ${{ github.ref }}

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Verify downloaded artifacts
        run: |
          echo "Downloaded artifacts structure:"
          find artifacts -type f -name "*" | sort
          
          # Check each platform
          for platform in ubuntu-latest windows-latest macos-latest; do
            echo ""
            echo "Checking $platform..."
            if [ -d "artifacts/parser-$platform" ]; then
              file_count=$(find "artifacts/parser-$platform" -type f | wc -l)
              if [ "$file_count" -eq 0 ]; then
                echo "❌ ERROR: No files found for $platform"
                exit 1
              else
                echo "✅ Found $file_count file(s) for $platform"
                ls -la "artifacts/parser-$platform/"
              fi
            else
              echo "❌ ERROR: Artifact directory not found for $platform"
              exit 1
            fi
          done

      - name: Organize binaries
        run: |
          # Clean existing prebuilt directory to avoid conflicts
          rm -rf prebuilt
          mkdir -p prebuilt
          
          # Create all platform directories explicitly
          mkdir -p prebuilt/ubuntu-latest
          mkdir -p prebuilt/windows-latest
          mkdir -p prebuilt/macos-latest
          
          # Copy artifacts to final structure with verification
          echo "Copying Ubuntu artifacts..."
          cp artifacts/parser-ubuntu-latest/* prebuilt/ubuntu-latest/
          ls -la prebuilt/ubuntu-latest/
          
          echo "Copying Windows artifacts..."
          cp artifacts/parser-windows-latest/* prebuilt/windows-latest/
          ls -la prebuilt/windows-latest/
          
          echo "Copying macOS artifacts..."
          cp artifacts/parser-macos-latest/* prebuilt/macos-latest/
          ls -la prebuilt/macos-latest/
          
          # Final verification
          echo ""
          echo "Complete prebuilt directory structure:"
          tree prebuilt || find prebuilt -type f | sort
          
          # Verify all files exist
          test -f prebuilt/ubuntu-latest/my-languages.so || (echo "❌ Ubuntu file missing!" && exit 1)
          test -f prebuilt/windows-latest/my-languages.dll || (echo "❌ Windows file missing!" && exit 1)
          test -f prebuilt/macos-latest/my-languages.dylib || (echo "❌ macOS file missing!" && exit 1)
          
          echo "✅ All 3 platform libraries verified and ready to commit"

      - name: Commit and push binaries
        run: |
          # Configure git
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          
          # Add all prebuilt files
          git add -A prebuilt/
          
          # Show what will be committed
          echo "Files staged for commit:"
          git status --porcelain
          
          # Commit if there are changes
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "🤖 Add prebuilt parser binaries for all platforms"
            git push
          fi

  # Optional: Create release artifacts when tagging
  create-release:
    needs: build-parsers
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    permissions:
      contents: write

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create release archives
        run: |
          cd artifacts
          for os in parser-*; do
            # Verify content before archiving
            if [ -d "$os" ] && [ "$(find "$os" -type f | wc -l)" -gt 0 ]; then
              tar czf "${os}.tar.gz" "$os"
              echo "✅ Created archive: ${os}.tar.gz"
            else
              echo "⚠️  Skipping empty directory: $os"
            fi
          done
          
          # List archives
          echo ""
          echo "Release archives created:"
          ls -lh *.tar.gz

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: artifacts/*.tar.gz
          generate_release_notes: true